//========================== FORMS ===========================
//============================================================
//> HTML:
/*

<html>

<head>
    <meta />
    <title></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="" rel="stylesheet" type="text/css" />
</head>

<body>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src=""></script>
</body>

</html>

*/
//============================================================
//> Fetch:  Fetch/.then/.catch
/*

fetch("https://...")
.then(respond => respond.json())
.then(data => {
    console.log(data);

    // Here goes the code, that interacts with the data.
})
.catch(error => {console.log("Error in accessing the site. (" + error + ")")})

*/
//======================== TOOLS =============================
//============================================================
//Cookies: SET/GET

//> SET:

function setCookie(dateTerm, name, data) {
    const JSONObj = JSON.stringify(data);

    const date = new Date();

    // === dateTerm === (0 - delete, 1/true - 20 min, else - 1 day)
    if (dateTerm == 0) date.setTime(date.getTime() - 1 * 24 * 60 * 60 * 1000);
    if (dateTerm == 1 || dateTerm == true) date.setTime(date.getTime() + 1 * 20 * 60 * 1000);
    else date.setTime(date.getTime() + 1 * 24 * 60 * 60 * 1000);

    const expires = date.toGMTString();

    document.cookie = name + "=" + JSONObj + "; expires=" + expires + "; path=/";
}

//> GET:

function getCookie(returnJSONCookieArr, cookieName) {
    // getCookie returns varieble false as it returns empty!!!
    
    const cDecoded = decodeURIComponent(document.cookie);

    const cookieArr = cDecoded.split("; ");

    // === returnJSONCookieArr === (1/true - returns the full list of the cookies as it is, else - returns the value from requested cookie (cookieName required).)
    if (returnJSONCookieArr == 1 || returnJSONCookieArr == true) return cookieArr != null && !(cookieArr.length == 1 && cookieArr == '') ? cookieArr : false;
    else
        if (cookieArr != null) {
            let cookie;

            cookieArr.forEach(el => {
                const splitCookies = el.split('=');

                if (splitCookies[0] == cookieName) cookie = JSON.parse(splitCookies[1]);
            }
            );

            return cookie != null ? cookie : false;
        }
}

//============================================================
// LocalStorage: SET/GET/DEL

//> SET

function setToLocalStorage(name, item){
    localStorage.setItem(name, JSON.stringify(item));
}

//> GET

function getFromLocalStorage(name){
    let item = localStorage.getItem(name);

    item = JSON.parse(item);

    if(item == null) return false;
    else return item;
}

//> DEL

function clearLocalStorage(specific, name){
    // === specific ===(1/true - to be specific and remove exact item (name required), else - delete all.)
    if(specific == 1 || specific == true) localStorage.removeItem(name);
    else localStorage.clear();
}

//============================================================

